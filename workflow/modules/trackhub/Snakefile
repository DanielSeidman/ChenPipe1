import sys
import os
from pathlib import Path

# Get utils. This is not great, but we can move to setup.py and install via pip later if want
utils_path = (Path(workflow.main_snakefile).parent.parent.parent).resolve()
if str(utils_path) not in sys.path:
    sys.path.append(str(utils_path))

import pandas as pd
import snparcher_utils

configfile: "config/config.yaml"
wildcard_constraints:
    window="\d+"

samples = snparcher_utils.parse_sample_sheet(config)
ref_name = samples['ref_name'].unique().tolist()
WINDOWS = [1000, 10000, 100000]
FILE_TYPES = ["Tajima", "SNP-Density", "Pi"] # dont change this unless you add rules to generate more stats.

rule all:
    input:
        trackhub_file = expand("results/{ref_name}/trackhub/hub.txt", ref_name=ref_name),
        trackhub_html = expand("results/{ref_name}/trackhub/index.html", ref_name=ref_name),

rule write_hub_files:
    input:
        window_stat_files = expand("results/{{ref_name}}/trackhub/{file_type}_{window}.bw", file_type=FILE_TYPES, window=WINDOWS),
        vcf = expand("results/{{ref_name}}/{prefix}_clean_snps.vcf.gz", prefix=config['final_prefix']),
        callable_sites = "results/{ref_name}/trackhub/non_callable_sites.bb",
        allele_freq = "results/{ref_name}/trackhub/allele_freq.bw",
        depth = "results/{ref_name}/trackhub/depth.bw",
        
    output:
        trackhub_file = "results/{ref_name}/trackhub/hub.txt",
        html = "results/{ref_name}/trackhub/index.html"
    params:
        ref_name = "{ref_name}",
        file_types = FILE_TYPES,
        windows = WINDOWS,
        email = config["trackhub_email"]
    script:
        "scripts/write_hub_files.py"

rule strip_vcf:
    """
    Strips vcf of all info/filters to reduce size
    """
    input:
        vcf = expand("results/{{ref_name}}/{prefix}_clean_snps.vcf.gz", prefix=config['final_prefix']),
    output:
        vcf = "results/{ref_name}/trackhub/info_stripped_snps.vcf.gz",
        tbi = "results/{ref_name}/trackhub/info_stripped_snps.vcf.gz.tbi"
    log:
        "logs/{ref_name}/trackhub/strip_vcf.log"
    conda:
        "envs/trackhub.yml"
    shell:
        """
        bcftools annotate -x INFO,FORMAT/DP,FORMAT/GQ,FORMAT/PL {input.vcf} -O z -o {output.vcf}
        tabix -p vcf {output.vcf}
        """


rule calc_tajima:
    input:
        vcf = expand("results/{{ref_name}}/{prefix}_clean_snps.vcf.gz", prefix=config['final_prefix']),
    output:
        temp("results/{ref_name}/trackhub/{window}.Tajima")
    log:
        "logs/{ref_name}/trackhub/tajima/{window}.log"
    conda:
        "envs/trackhub.yml"
    shell:
        """
        vcftools --gzvcf {input} --TajimaD {wildcards.window} --stdout > {output} 2>> {log}
        """

rule calc_snpden:
    input:
        vcf = expand("results/{{ref_name}}/{prefix}_clean_snps.vcf.gz", prefix=config['final_prefix']),
    output:
        temp("results/{ref_name}/trackhub/{window}.SNP-Density")
    log:
        "logs/{ref_name}/trackhub/SNP-Density/{window}.log"
    conda:
        "envs/trackhub.yml"
    shell:
        """
        vcftools --gzvcf {input} --SNPdensity {wildcards.window} --stdout > {output} 2> {log}
        """

rule calc_pi:
    input:
        vcf = expand("results/{{ref_name}}/{prefix}_clean_snps.vcf.gz", prefix=config['final_prefix']),
    output:
        temp( "results/{ref_name}/trackhub/{window}.Pi")
    log:
        "logs/{ref_name}/trackhub/Pi/{window}.log"
    conda:
        "envs/trackhub.yml"
    shell:
        """
        vcftools --gzvcf {input} --window-pi {wildcards.window} --stdout > {output} 2> {log}
        """

rule chrom_sizes:
    input:
        "results/{ref_name}/data/genome/{ref_name}.fna.fai"
    output:
        "results/{ref_name}/trackhub/chrom.sizes"
    shell:
        "cut -f1,2 {input} > {output}"

rule bcftools_depth:
    input:
        vcf = expand("results/{{ref_name}}/{prefix}_clean_snps.vcf.gz", prefix=config['final_prefix']),
        chrom_sizes = "results/{ref_name}/trackhub/chrom.sizes"
    output:
        bg = temp("results/{ref_name}/trackhub/depth.bg"),
        bw = "results/{ref_name}/trackhub/depth.bw"
        
    conda:
        "envs/trackhub.yml"
    shell:
        """
        bcftools query -f '%CHROM\t%POS\t%POS\t%DP\n' {input.vcf} | awk -v OFS='\t' '{{print $1,$2-1,$2,$4}}' > {output.bg}
        bedGraphToBigWig {output.bg} {input.chrom_sizes} {output.bw}
        """

rule vcftools_freq:
    input:
        vcf = expand("results/{{ref_name}}/{prefix}_clean_snps.vcf.gz", prefix=config['final_prefix']),
        chrom_sizes = "results/{ref_name}/trackhub/chrom.sizes"
    output:
        bg = temp("results/{ref_name}/trackhub/allele_freq.bg"),
        bw = "results/{ref_name}/trackhub/allele_freq.bw"
    
    conda:
        "envs/trackhub.yml"
    shell:
        """
        vcftools --gzvcf {input.vcf} --freq2 --stdout | cut -f 1,2,6 | tail -n +2 | awk -v OFS='\t' '{{print $1,$2-1,$2,$3}}' > {output.bg}
        bedGraphToBigWig {output.bg} {input.chrom_sizes} {output.bw}
        """
        
rule convert_to_bedgraph:
    input:
        stat_file = "results/{ref_name}/trackhub/{window}.{file_type}",
        chrom_sizes = "results/{ref_name}/trackhub/chrom.sizes"
    output:
        temp("results/{ref_name}/trackhub/{file_type}_{window}.bg")
    script:
        "scripts/vcftools_out_to_bg.py"

rule bedgraph_to_bigwig:
    input:
        bg = "results/{ref_name}/trackhub/{file_type}_{window}.bg",
        chrom_sizes = "results/{ref_name}/trackhub/chrom.sizes"
    output:
        "results/{ref_name}/trackhub/{file_type}_{window}.bw"
    conda:
        "envs/trackhub.yml"
    shell:
        "bedGraphToBigWig {input.bg} {input.chrom_sizes} {output}"

rule non_callable_sites:
    """
    Calculates complement of callable sites to make 'non-callable sites' this makes visualzing on browser easier.
    """
    input:
        callable_sites = expand("results/{{ref_name}}/{prefix}_callable_sites.bed", prefix=config['final_prefix']),
        chrom_sizes = "results/{ref_name}/trackhub/chrom.sizes",
        
    output:
        bed = temp("results/{ref_name}/trackhub/non_callable_sites.bed"),
        bb = "results/{ref_name}/trackhub/non_callable_sites.bb"
    conda:
        "envs/trackhub.yml"
    shell:
        """
        sort -k1,1 {input.chrom_sizes} > sorted.chrom.sizes
        bedtools complement -i {input.callable_sites} -g sorted.chrom.sizes > {output.bed}
        bedToBigBed {output.bed} {input.chrom_sizes} {output.bb}
        """